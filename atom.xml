<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DeepIceCream]]></title>
  <link href="http://czczup.github.io/atom.xml" rel="self"/>
  <link href="http://czczup.github.io/"/>
  <updated>2018-02-16T22:07:44+08:00</updated>
  <id>http://czczup.github.io/</id>
  <author>
    <name><![CDATA[nonoka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1034. 有理数四则运算 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180213/pat-basic-level-1034/"/>
    <updated>2018-02-13T22:44:16+08:00</updated>
    <id>http://czczup.github.io/blog/20180213/pat-basic-level-1034</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求编写程序，计算2个有理数的和、差、积、商。</p>

<!--more-->


<pre><code>输入格式：
输入在一行中按照“a1/b1 a2/b2”的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为0。

输出格式：
分别在4行中按照“有理数1 运算符 有理数2 = 结果”的格式顺序输出2个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式“k a/b”，其中k是整数部分，a/b是最简分数部分；若为负数，则须加括号；若除法分母为0，则输出“Inf”。题目保证正确的输出中没有超过整型范围的整数。

输入样例1：
2/3 -4/2

输出样例1：
2/3 + (-2) = (-1 1/3)
2/3 - (-2) = 2 2/3
2/3 * (-2) = (-1 1/3)
2/3 / (-2) = (-1/3)

输入样例2：
5/3 0/6

输出样例2：
1 2/3 + 0 = 1 2/3
1 2/3 - 0 = 1 2/3
1 2/3 * 0 = 0
1 2/3 / 0 = Inf
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>推导分数加法公式：$ \frac{symbol_1\times{a}}{b} + \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} + symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数减法公式：$ \frac{symbol_1\times{a}}{b} - \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} - symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数乘法公式：$ \frac{symbol_1\times{a}}{b} \times  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ac}}{bd} $。</p></li>
<li><p>推导分数除法公式：$ \frac{symbol_1\times{a}}{b} \div  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ad}}{bc} $。</p></li>
<li><p>读入数据，若<code>numerator</code>或<code>denominator</code>小于0，则<code>symbol</code>初始化为<code>"-"</code>,否则初始化为<code>""</code>。</p></li>
<li><p>用辗转相除法求最大公约数<code>maxnum</code>。</p></li>
<li><p>根据上述公式实现<code>add(num)</code>、<code>sub(num)</code>、<code>mul(num)</code>、<code>div(num)</code>方法。</p></li>
<li><p>实现<code>simplify()</code>分数化简方法，在加减乘除运算之后进行分数化简。首先，计算分数的整数部分：<code>integer = numerator // denominator</code>；然后，更新分数的分子：<code>numerator -= integer * denominator</code>；接着，更新分数的分子：<code>numerator = numerator // maxnum</code>；之后，更新分数的分母：<code>denominator = denominator // maxnum</code>；最后，根据整数、分子、分母三部分是否为0生成字符串<code>value</code>。</p></li>
<li><p>输出化简后的分数，若为负数则在数字两端额外输出括号。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">number</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="s">&quot;-&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">%</span><span class="n">a</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">simplify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Inf&quot;</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">maxnum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span> <span class="c"># 最大公约数</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">-=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">denominator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">numerator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">input_num</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="n">num1</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
</span><span class='line'><span class="n">num2</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'><span class="n">num_add</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_sub</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_mul</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_div</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">num</span><span class="o">.</span><span class="n">simplify</span><span class="p">()</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">num1</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="n">num_add</span><span class="p">,</span><span class="n">num_sub</span><span class="p">,</span><span class="n">num_mul</span><span class="p">,</span><span class="n">num_div</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;+&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_add</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;-&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_sub</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;*&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_mul</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;/&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_div</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1034.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1030. 完美数列 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170411/pat-basic-level-1030/"/>
    <updated>2017-04-11T09:33:40+08:00</updated>
    <id>http://czczup.github.io/blog/20170411/pat-basic-level-1030</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一个正整数数列，和正整数p，设这个数列中的最大值是M，最小值是m，如果M &lt;= m * p，则称这个数列是完美数列。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现在给定参数p和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p>

<pre><code>输入格式：
输入第一行给出两个正整数N和p，其中N（&lt;= 105）是输入的正整数的个数，p（&lt;= 109）是给定的参数。第二行给出N个正整数，每个数不超过109。

输出格式：
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。

输入样例：
10 8
2 3 20 4 5 1 6 7 8 9

输出样例：
8
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">;</span> <span class="c1">//正整数的个数、给定的参数 </span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">){</span> <span class="c1">//控制i和j的距离最大 </span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;=</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">){</span><span class="c1">//max&lt;=min*p</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">count</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1030.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1028. 人口普查 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170410/pat-basic-level-1028/"/>
    <updated>2017-04-10T20:37:49+08:00</updated>
    <id>http://czczup.github.io/blog/20170410/pat-basic-level-1028</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过200岁的老人，而今天是2014年9月6日，所以超过200岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p>

<pre><code>输入格式：
输入在第一行给出正整数N，取值在(0, 105]；随后N行，每行给出1个人的姓名（由不超过5个英文字母组成的字符串）、以及按“yyyy/mm/dd”（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

输出格式：
在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

输入样例：
5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20

输出样例：
3 Tom John
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>由题可知合法的生日范围为<code>1814年9月6日</code>到<code>2014年9月6日</code>之间，为了方便判断生日是否合法，可以对生日进行换算。根据公式<code>换算值 = (年-1)*365 + (月-1)*30 + 日</code>,可得生日范围为<code>[661991,734991]</code>。由于只是进行相对的比较，无需考虑闰年和平年的区别。</p></li>
<li><p>注意可能存在所有生日都不合法的情况，这时应输出0。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min</span><span class="o">=</span><span class="mi">734991</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="n">maxname</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="n">minname</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">year</span><span class="p">,</span><span class="n">month</span><span class="p">,</span><span class="n">day</span><span class="p">;</span>
</span><span class='line'>      <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s %d/%d/%d&quot;</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="o">&amp;</span><span class="n">year</span><span class="p">,</span><span class="o">&amp;</span><span class="n">month</span><span class="p">,</span><span class="o">&amp;</span><span class="n">day</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">year</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">365</span> <span class="o">+</span> <span class="p">(</span><span class="n">month</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">30</span> <span class="o">+</span> <span class="n">day</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&gt;=</span><span class="mi">661991</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span><span class="o">&lt;=</span><span class="mi">734991</span><span class="p">){</span> <span class="c1">//通过数据预处理转化为比大小问题</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">){</span> <span class="c1">//找最年幼</span>
</span><span class='line'>              <span class="n">max</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>              <span class="n">strcpy</span><span class="p">(</span><span class="n">minname</span><span class="p">,</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">){</span> <span class="c1">//找最年长</span>
</span><span class='line'>              <span class="n">min</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>              <span class="n">strcpy</span><span class="p">(</span><span class="n">maxname</span><span class="p">,</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++</span><span class="p">;</span> <span class="c1">//合法输入计数</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">//注意可能存在都不合法的情况，这时应输出0</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %s %s&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">,</span><span class="n">maxname</span><span class="p">,</span><span class="n">minname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1028.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1015. 德才论 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170410/pat-basic-level-1015/"/>
    <updated>2017-04-10T16:56:03+08:00</updated>
    <id>http://czczup.github.io/blog/20170410/pat-basic-level-1015</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>

<pre><code>输入格式：
输入第1行给出3个正整数，分别为：N（&lt;=105），即考生总数；L（&gt;=60），为录取最低分数线，即德分和才分均不低于L的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线L的考生也按总分排序，但排在第三类考生之后。
随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。数字间以空格分隔。

输出格式：
输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。

输入样例：
14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60

输出样例：
12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>根据排序规则写一个<code>cmp()</code>函数，调用<code>&lt;algorithm&gt;</code>中的<code>sort(list,list+len,cmp)</code>快排函数进行排序。</p>

<ul>
<li>高于优先录取线（才德全尽）；</li>
<li>才分不到但德分到线（德胜才）；</li>
<li>德才分均低于H，但是德分不低于才分（才德兼亡但尚有德胜才）；</li>
<li>其他达到最低线L。</li>
</ul>
</li>
</ol>


<hr />

<figure class='code'><figcaption><span>C++语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">examination</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">examnum</span><span class="p">;</span><span class="c1">//准考证号 </span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">moral</span><span class="p">,</span><span class="n">talent</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span><span class="c1">//德、才、总分 </span>
</span><span class='line'><span class="p">}</span><span class="n">exam</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">exam</span> <span class="n">a</span><span class="p">,</span><span class="n">exam</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">sum</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">sum</span><span class="p">)</span><span class="c1">//先按总分排,降序 </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">moral</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">moral</span><span class="p">)</span><span class="c1">//再按德分排,降序 </span>
</span><span class='line'>            <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">examnum</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">examnum</span><span class="p">;</span><span class="c1">//再按学号排,升序 </span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">moral</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">moral</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">exam</span> <span class="nf">swap</span><span class="p">(</span><span class="n">exam</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">,</span><span class="n">exam</span> <span class="o">&amp;</span><span class="n">stu2</span><span class="p">){</span><span class="c1">//交换两个成绩的位置 </span>
</span><span class='line'>    <span class="n">exam</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">stu1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stu1</span> <span class="o">=</span> <span class="n">stu2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stu2</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">amount</span><span class="p">,</span><span class="n">lowest</span><span class="p">,</span><span class="n">priority</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amount</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lowest</span><span class="p">,</span><span class="o">&amp;</span><span class="n">priority</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exam</span> <span class="n">stu</span><span class="p">[</span><span class="n">amount</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">examnum</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">);</span>
</span><span class='line'>        <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sum</span> <span class="o">=</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span> <span class="o">+</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到德才全尽交换到头部 </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">priority</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="p">,</span><span class="n">stu</span> <span class="o">+</span> <span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到德胜才交换到德才全尽后 </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到才德兼亡但尚有德胜才交换到德胜才后 </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">lowest</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到才德兼亡但尚有德胜才交换到德胜才后 </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">lowest</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">examnum</span><span class="p">,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="p">,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1015.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1046. 划拳 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170405/pat-basic-level-1046/"/>
    <updated>2017-04-05T10:54:26+08:00</updated>
    <id>http://czczup.github.io/blog/20170405/pat-basic-level-1046</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p>

<pre><code>输入格式：
输入第一行先给出一个正整数N（&lt;=100），随后N行，每行给出一轮划拳的记录，格式为：
甲喊 甲划 乙喊 乙划
其中“喊”是喊出的数字，“划”是划出的数字，均为不超过100的正整数（两只手一起划）。

输出格式：
在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。

输入样例：
5
8 10 9 12
5 10 5 10
3 8 5 12
12 18 1 13
4 16 12 15

输出样例：
1 2
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>用<code>drink1</code>、<code>drink2</code>分别记录甲和乙喝酒的杯数。</p></li>
<li><p>将两人划的数字分别与喊的数字之和比较，若相等则杯数+1。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fst1</span><span class="p">,</span><span class="n">fst2</span><span class="p">,</span><span class="n">sec1</span><span class="p">,</span><span class="n">sec2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">drink1</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">drink2</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">fst1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">fst2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">sec1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">sec2</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">fst1</span> <span class="o">+</span> <span class="n">sec1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fst2</span><span class="o">==</span><span class="n">sum</span> <span class="o">&amp;&amp;</span> <span class="n">sec2</span><span class="o">!=</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'>            <span class="n">drink2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">sec2</span><span class="o">==</span><span class="n">sum</span> <span class="o">&amp;&amp;</span> <span class="n">fst2</span><span class="o">!=</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'>            <span class="n">drink1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="n">drink1</span><span class="p">,</span><span class="n">drink2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1046.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1040. 有几个PAT (25)]]></title>
    <link href="http://czczup.github.io/blog/20170328/pat-basic-level-1040/"/>
    <updated>2017-03-28T16:59:22+08:00</updated>
    <id>http://czczup.github.io/blog/20170328/pat-basic-level-1040</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;字符串<code>APPAPT</code>中包含了两个单词<code>“PAT”</code>，其中第一个<code>PAT</code>是第2位(P),第4位(A),第6位(T)；第二个<code>PAT</code>是第3位(P),第4位(A),第6位(T)。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现给定字符串，问一共可以形成多少个PAT？</p>

<pre><code>输入格式：
输入只有一行，包含一个字符串，长度不超过10^5，只包含P、A、T三种字母。

输出格式：
在一行中输出给定字符串中包含多少个PAT。由于结果可能比较大，只输出对1000000007取余数的结果。

输入样例：
APPAPT

输出样例：
2
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">[</span><span class="mi">100010</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">P</span><span class="p">[</span><span class="mi">100010</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="c1">//A后找T,A前找P </span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">string</span><span class="p">[</span><span class="mi">100010</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lenstr</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">lenstr</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;T&#39;</span><span class="p">)</span> <span class="c1">//A后找T </span>
</span><span class='line'>            <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">lenstr</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;P&#39;</span><span class="p">)</span> <span class="c1">//A前找P</span>
</span><span class='line'>            <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//sum会超出int的取值范围 </span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">lenstr</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;A&#39;</span><span class="p">){</span> <span class="c1">//找A并计算 </span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pat</span> <span class="o">=</span> <span class="n">sum</span><span class="o">%</span><span class="mi">1000000007</span><span class="p">;</span> <span class="c1">//求余数 </span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">pat</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1040.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1039. 到底买不买 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170328/pat-basic-level-1039/"/>
    <updated>2017-03-28T15:47:48+08:00</updated>
    <id>http://czczup.github.io/blog/20170328/pat-basic-level-1039</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p>

<!--more-->


<center><img src="http://czczup.github.io/images/patb/1039.jpg"></center>


<p></p>

<p>&#160; &#160; &#160; &#160;为方便起见，我们用<code>[0-9]</code>、<code>[a-z]</code>、<code>[A-Z]</code>范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p>

<pre><code>输入格式：
每个输入包含1个测试用例。每个测试用例分别在2行中先后给出摊主的珠串和小红想做的珠串，两串都不超过1000个珠子。

输出格式：
如果可以买，则在一行中输出“Yes”以及有多少多余的珠子；如果不可以买，则在一行中输出“No”以及缺了多少珠子。其间以1个空格分隔。

输入样例1：
ppRYYGrrYBR2258
YrR8RrY

输出样例1：
Yes 8

输入样例2：
ppRYYGrrYB225
YrR8RrY

输出样例2：
No 2
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">pearl</span><span class="p">[</span><span class="mi">1000</span><span class="p">],</span><span class="n">buy</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mark</span><span class="p">[</span><span class="mi">1000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">pearl</span><span class="p">);</span><span class="c1">//店家串好的</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">buy</span><span class="p">);</span><span class="c1">//想买的</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">lenbuy</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buy</span><span class="p">),</span><span class="n">lenpearl</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">pearl</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">lenbuy</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">lenpearl</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">buy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">pearl</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">mark</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">mark</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//数到过</span>
</span><span class='line'>              <span class="n">cnt</span><span class="o">++</span><span class="p">;</span><span class="c1">//记录有用的</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">lenbuy</span><span class="p">)</span><span class="c1">//想买的珠子都买到</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Yes %d&quot;</span><span class="p">,</span><span class="n">lenpearl</span> <span class="o">-</span> <span class="n">lenbuy</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span><span class="c1">//有珠子没买到</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No %d&quot;</span><span class="p">,</span><span class="n">lenbuy</span> <span class="o">-</span> <span class="n">cnt</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1039.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1038. 统计同成绩学生 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170328/pat-basic-level-1038/"/>
    <updated>2017-03-28T15:21:42+08:00</updated>
    <id>http://czczup.github.io/blog/20170328/pat-basic-level-1038</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求读入N名学生的成绩，将获得某一给定分数的学生人数输出。</p>

<!--more-->


<pre><code>输入格式：
输入在第1行给出不超过10^5的正整数N，即学生总人数。随后1行给出N名学生的百分制整数成绩，中间以空格分隔。最后1行给出要查询的分数个数K（不超过N的正整数），随后是K个分数，中间以空格分隔。

输出格式：
在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。

输入样例：
10
60 75 90 55 75 99 82 90 75 50
3 75 90 88

输出样例：
3 2 0
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span> <span class="c1">//学生总人数</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">score</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="c1">//0-100分 </span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">grade</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">grade</span><span class="p">);</span>
</span><span class='line'>        <span class="n">score</span><span class="p">[</span><span class="n">grade</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">check_num</span><span class="p">;</span> <span class="c1">//检查的分数数量 </span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">check_num</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">check_num</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">check</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">check</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">score</span><span class="p">[</span><span class="n">check</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">check_num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1038.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1037. 在霍格沃茨找零钱 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170328/pat-basic-level-1037/"/>
    <updated>2017-03-28T15:12:32+08:00</updated>
    <id>http://czczup.github.io/blog/20170328/pat-basic-level-1037</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统，就如海格告诉哈利的：<code>“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”</code>现在，给定哈利应付的价钱P和他实付的钱A，你的任务是写一个程序来计算他应该被找的零钱。</p>

<!--more-->


<pre><code>输入格式：
输入在1行中分别给出P和A，格式为“Galleon.Sickle.Knut”，其间用1个空格分隔。这里Galleon是[0, 107]区间内的整数，Sickle是[0, 17)区间内的整数，Knut是[0, 29)区间内的整数。

输出格式：
在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。

输入样例1：
10.16.27 14.1.28

输出样例1：
3.2.1

输入样例2：
14.1.28 10.16.27

输出样例2：
-3.2.1
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Galleon</span><span class="p">,</span><span class="n">Sickle</span><span class="p">,</span><span class="n">Knut</span><span class="p">;</span> <span class="c1">//商品价格</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d.%d.%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">Galleon</span><span class="p">,</span><span class="o">&amp;</span><span class="n">Sickle</span><span class="p">,</span><span class="o">&amp;</span><span class="n">Knut</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">galleon</span><span class="p">,</span><span class="n">sickle</span><span class="p">,</span><span class="n">knut</span><span class="p">;</span> <span class="c1">//哈利波特带的钱</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d.%d.%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">galleon</span><span class="p">,</span><span class="o">&amp;</span><span class="n">sickle</span><span class="p">,</span><span class="o">&amp;</span><span class="n">knut</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Money</span> <span class="o">=</span> <span class="p">(</span><span class="n">Galleon</span> <span class="o">*</span> <span class="mi">17</span> <span class="o">+</span> <span class="n">Sickle</span><span class="p">)</span> <span class="o">*</span> <span class="mi">29</span> <span class="o">+</span> <span class="n">Knut</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">money</span> <span class="o">=</span> <span class="p">(</span><span class="n">galleon</span> <span class="o">*</span> <span class="mi">17</span> <span class="o">+</span> <span class="n">sickle</span><span class="p">)</span> <span class="o">*</span> <span class="mi">29</span> <span class="o">+</span> <span class="n">knut</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">g</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">charge</span><span class="p">;</span> <span class="c1">//找零 </span>
</span><span class='line'>    <span class="n">charge</span> <span class="o">=</span> <span class="n">money</span> <span class="o">-</span> <span class="n">Money</span><span class="p">;</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">charge</span> <span class="o">%</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">abs</span><span class="p">((</span><span class="n">charge</span> <span class="o">/</span> <span class="mi">29</span><span class="p">)</span> <span class="o">%</span> <span class="mi">17</span><span class="p">);</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">=</span> <span class="p">(</span><span class="n">charge</span> <span class="o">/</span> <span class="mi">29</span><span class="p">)</span> <span class="o">/</span> <span class="mi">17</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d.%d.%d&quot;</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1037.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1036. 跟奥巴马一起编程 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170328/pat-basic-level-1036/"/>
    <updated>2017-03-28T14:57:12+08:00</updated>
    <id>http://czczup.github.io/blog/20170328/pat-basic-level-1036</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p>

<!--more-->


<pre><code>输入格式：
输入在一行中给出正方形边长N（3&lt;=N&lt;=20）和组成正方形边的某种字符C，间隔一个空格。

输出格式：
输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。

输入样例：
10 a

输出样例：
aaaaaaaaaa
a        a
a        a
a        a
aaaaaaaaaa
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">N</span><span class="o">/</span><span class="mf">2.0</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1036.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1033. 旧键盘打字 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170327/pat-basic-level-1033/"/>
    <updated>2017-03-27T23:00:02+08:00</updated>
    <id>http://czczup.github.io/blog/20170327/pat-basic-level-1033</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p>

<!--more-->


<pre><code>输入格式：
输入在2行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过105个字符的串。可用的字符包括字母[a-z, A-Z]、数字0-9、以及下划线“_”（代表空格）、“,”、“.”、“-”、“+”（代表上档键）。题目保证第2行输入的文字串非空。
注意：如果上档键坏掉了，那么大写的英文字母无法被打出。

输出格式：
在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。

输入样例：
7+IE.
7_This_is_a_test.

输出样例：
_hs_s_a_tst
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>如果坏键是<code>'+'</code>(上档键)，则所有大写字母用<code>'\0'</code>标记。</p></li>
<li><p>如果坏键是大写字母，则对应的大小写字母都用<code>'\0'</code>标记。</p></li>
<li><p>如果坏键的字符和给出的字符相同，则该字符用<code>'\0'</code>标记。</p></li>
<li><p>输出时跳过所有<code>'\0'</code>。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">bad</span><span class="p">[</span><span class="mi">256</span><span class="p">],</span><span class="n">text</span><span class="p">[</span><span class="mi">100010</span><span class="p">];</span> <span class="c1">//没有字符能打出</span>
</span><span class='line'>    <span class="n">gets</span><span class="p">(</span><span class="n">bad</span><span class="p">);</span> <span class="c1">//坏掉的键,第二个测试点是特例,是一个第一行为空的例子</span>
</span><span class='line'>    <span class="n">gets</span><span class="p">(</span><span class="n">text</span><span class="p">);</span> <span class="c1">//读入字符串</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">strlen</span><span class="p">(</span><span class="n">bad</span><span class="p">);</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;Z&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="c1">//如果坏键是&#39;+&#39;,文本是大写字母,则无输出</span>
</span><span class='line'>                <span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;Z&#39;</span><span class="p">)</span><span class="c1">//控制条件要严格 </span>
</span><span class='line'>            <span class="c1">//如果坏键是大写字母,文本是字母,则无输出</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">||</span> <span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">bad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>            <span class="c1">//如果两个字符相等,则无输出 </span>
</span><span class='line'>                <span class="n">text</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>  
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> 
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="c1">//跳过所有标记</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1033.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1032. 挖掘机技术哪家强 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170327/pat-basic-level-1032/"/>
    <updated>2017-03-27T21:20:49+08:00</updated>
    <id>http://czczup.github.io/blog/20170327/pat-basic-level-1032</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;为了用事实说明挖掘机技术到底哪家强，PAT组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p>

<!--more-->


<pre><code>输入格式：
输入在第1行给出不超过105的正整数N，即参赛人数。随后N行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从1开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。

输出格式：
在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。

输入样例：
6
3 65
2 80
1 100
2 70
3 40
3 0

输出样例：
2 150
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">school</span><span class="p">[</span><span class="mi">100001</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="c1">//最多有10^5所学校</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span><span class="p">,</span><span class="n">score</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">num</span><span class="p">,</span><span class="o">&amp;</span><span class="n">score</span><span class="p">);</span>
</span><span class='line'>        <span class="n">school</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">+=</span><span class="n">score</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">school</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">&gt;</span><span class="n">max</span><span class="p">){</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">school</span><span class="p">[</span><span class="n">num</span><span class="p">];</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span> <span class="c1">//记录下标</span>
</span><span class='line'>        <span class="p">}</span> <span class="c1">//在记录数据的同时选出最大值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="n">index</span><span class="p">,</span><span class="n">school</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1032.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1031. 查验身份证 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170327/pat-basic-level-1031/"/>
    <updated>2017-03-27T20:46:12+08:00</updated>
    <id>http://czczup.github.io/blog/20170327/pat-basic-level-1031</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;首先对前17位数字加权求和，权重分配为：<code>{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}</code>；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Z：0 1 2 3 4 5 6 7 8 9 10
</span><span class='line'>M：1 0 X 9 8 7 6 5 4 3 2</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>

<pre><code>输入格式：
输入第一行给出正整数N（&lt;= 100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。

输出格式：
按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出“All passed”。

输入样例1：
4
320124198808240056
12010X198901011234
110108196711301866
37070419881216001X

输出样例1：
12010X198901011234
110108196711301866
37070419881216001X

输入样例2：
2
320124198808240056
110108196711301862

输出样例2：
All passed
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>按编码规则对身份证号码进行检验，若<code>前17位存在非数字</code>或<code>计算所得校验码与所给校验码不同</code>，则检查不通过。</p></li>
<li><p>用<code>allTrue</code>记录是否全部的输入均正确，若有一个身份证不合法就将<code>allTrue</code>赋值为<code>false</code>，同时输出错误的身份证号。若最后<code>allTrue</code>为<code>true</code>，则输出<code>"All passed"</code>。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">m</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;1&#39;</span><span class="p">,</span><span class="sc">&#39;0&#39;</span><span class="p">,</span><span class="sc">&#39;X&#39;</span><span class="p">,</span><span class="sc">&#39;9&#39;</span><span class="p">,</span><span class="sc">&#39;8&#39;</span><span class="p">,</span><span class="sc">&#39;7&#39;</span><span class="p">,</span><span class="sc">&#39;6&#39;</span><span class="p">,</span><span class="sc">&#39;5&#39;</span><span class="p">,</span><span class="sc">&#39;4&#39;</span><span class="p">,</span><span class="sc">&#39;3&#39;</span><span class="p">,</span><span class="sc">&#39;2&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">weight</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">check</span><span class="p">(</span><span class="kt">char</span> <span class="n">id</span><span class="p">[]){</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">17</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">id</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;0&#39;</span><span class="o">&amp;&amp;</span><span class="n">id</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;9&#39;</span><span class="p">))</span> <span class="c1">//存在非数字</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">17</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">id</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">*</span><span class="n">weight</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">id</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span><span class="o">!=</span><span class="n">m</span><span class="p">[</span><span class="n">sum</span> <span class="o">%</span> <span class="mi">11</span><span class="p">])</span> <span class="c1">//校验码不等于最后一位</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span><span class="n">allTrue</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">id</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>      <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="n">check</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> <span class="c1">//检查是否正确</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="nb">false</span><span class="p">){</span>
</span><span class='line'>          <span class="n">allTrue</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//有一项不正确则不全正确</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">id</span><span class="p">);</span> <span class="c1">//不正确就输出</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">allTrue</span><span class="o">==</span><span class="nb">true</span><span class="p">)</span> <span class="c1">//全部正确</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;All passed&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1031.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1029. 旧键盘 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170304/pat-basic-level-1029/"/>
    <updated>2017-03-04T19:53:44+08:00</updated>
    <id>http://czczup.github.io/blog/20170304/pat-basic-level-1029</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p>

<!--more-->


<pre><code>输入格式：
输入在2行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过80个字符的串，由字母A-Z（包括大、小写）、数字0-9、以及下划线“_”（代表空格）组成。题目保证2个字符串均非空。

输出格式：
按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有1个坏键。

输入样例：
7_This_is_a_test
_hs_s_a_es

输出样例：
7TI
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="c"># 转换为大写</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'><span class="n">charList</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span> <span class="c"># 转换为list</span>
</span><span class='line'><span class="n">badKey</span> <span class="o">=</span> <span class="p">[]</span> <span class="c">#用来记录是否重复出现</span>
</span><span class='line'><span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">charList</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">str2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">badKey</span><span class="p">:</span>
</span><span class='line'>            <span class="n">badKey</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">char</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1029.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1027. 打印沙漏 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170226/pat-basic-level-1027/"/>
    <updated>2017-02-26T11:21:42+08:00</updated>
    <id>http://czczup.github.io/blog/20170226/pat-basic-level-1027</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个<code>“*”</code>，要求按下列格式打印。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*****
</span><span class='line'> ***
</span><span class='line'>  *
</span><span class='line'> ***
</span><span class='line'>*****</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>&#160; &#160; &#160; &#160;所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>

<p>&#160; &#160; &#160; &#160;给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>

<pre><code>输入格式：
输入在一行给出1个正整数N（&lt;=1000）和一个符号，中间以空格分隔。

输出格式：
首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。

输入样例：
19 *

输出样例：
*****
 ***
  *
 ***
*****
2
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">draw</span><span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="p">,</span><span class="kt">int</span> <span class="n">layer</span><span class="p">,</span><span class="kt">char</span> <span class="n">ch</span><span class="p">){</span> <span class="c1">//绘制符号</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">layer</span><span class="o">-</span><span class="n">cnt</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">*</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">layer</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">layer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">sqrt</span><span class="p">((</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="n">layer</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">cnt</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">cnt</span><span class="o">--</span><span class="p">){</span> <span class="c1">//画上半个漏斗</span>
</span><span class='line'>        <span class="n">draw</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span><span class="n">layer</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">cnt</span><span class="o">&lt;</span><span class="n">layer</span><span class="p">;</span><span class="n">cnt</span><span class="o">++</span><span class="p">){</span> <span class="c1">//画下半个漏斗</span>
</span><span class='line'>        <span class="n">draw</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span><span class="n">layer</span><span class="p">,</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">N</span><span class="o">-</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">layer</span><span class="o">*</span><span class="n">layer</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1027.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1026. 程序运行时间 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170226/pat-basic-level-1026/"/>
    <updated>2017-02-26T10:42:56+08:00</updated>
    <id>http://czczup.github.io/blog/20170226/pat-basic-level-1026</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;要获得一个C语言程序的运行时间，常用的方法是调用头文件<code>time.h</code>，其中提供了<code>clock()</code>函数，可以捕捉从程序开始运行到<code>clock()</code>被调用时所耗费的时间。这个时间单位是<code>clock tick</code>，即“时钟打点”。同时还有一个常数<code>CLK_TCK</code>，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数f的运行时间，我们只要在调用f之前先调用<code>clock()</code>，获得一个时钟打点数C1；在f执行完成后再调用<code>clock()</code>，获得另一个时钟打点数C2；两次获得的时钟打点数之差<code>(C2-C1)</code>就是f运行所消耗的时钟打点数，再除以常数<code>CLK_TCK</code>，就得到了以秒为单位的运行时间。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;这里不妨简单假设常数<code>CLK_TCK</code>为100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>

<pre><code>输入格式：
输入在一行中顺序给出2个整数C1和C2。注意两次获得的时钟打点数肯定不相同，即C1 &lt; C2，并且取值在[0, 107]。

输出格式：
在一行中输出被测函数运行的时间。运行时间必须按照“hh:mm:ss”（即2位的“时:分:秒”）格式输出；不足1秒的时间四舍五入到秒。

输入样例：
123 4577973

输出样例：
12:42:59
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>计算时间差并四舍五入。</p></li>
<li><p>转换为“hh:mm:ss”格式输出。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">CLK1</span><span class="p">,</span><span class="n">CLK2</span><span class="p">,</span><span class="n">dCLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">CLK1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">CLK2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dCLK</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)((</span><span class="n">CLK2</span><span class="o">-</span><span class="n">CLK1</span><span class="p">)</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hour</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">/</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minute</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">%</span> <span class="mi">3600</span> <span class="o">/</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="n">second</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">%</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02d:%02d:%02d&quot;</span><span class="p">,</span><span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1026.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1025. 反转链表 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170226/pat-basic-level-1025/"/>
    <updated>2017-02-26T10:27:36+08:00</updated>
    <id>http://czczup.github.io/blog/20170226/pat-basic-level-1025</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一个常数K以及一个单链表L，请编写程序将L中每K个结点反转。例如：给定L为1→2→3→4→5→6，K为3，则输出应该为3→2→1→6→5→4；如果K为4，则输出应该为4→3→2→1→5→6，即最后不到K个元素不反转。</p>

<!--more-->


<pre><code>输入格式：
每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址、结点总个数正整数N(&lt;= 105)、以及正整数K(&lt;=N)，即要求反转的子链结点的个数。结点的地址是5位非负整数，NULL地址用-1表示。
接下来有N行，每行格式为：
Address Data Next
其中Address是结点地址，Data是该结点保存的整数数据，Next是下一结点的地址。

输出格式：
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218

输出样例：
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt; </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">first</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">first</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">next</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">final</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">address</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">address</span><span class="p">);</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="n">address</span><span class="p">],</span><span class="o">&amp;</span><span class="n">next</span><span class="p">[</span><span class="n">address</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">first</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">list</span><span class="p">[</span><span class="n">cnt</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>        <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">first</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cnt</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="n">cnt</span><span class="o">-</span><span class="n">cnt</span><span class="o">%</span><span class="n">k</span><span class="p">);</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[(</span><span class="n">i</span><span class="o">/</span><span class="n">k</span><span class="p">)</span><span class="o">*</span><span class="n">k</span><span class="o">+</span><span class="n">k</span><span class="o">-</span><span class="n">i</span><span class="o">%</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cnt</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%05d %d %05d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">data</span><span class="p">[</span><span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span><span class="n">final</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%05d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">final</span><span class="p">[</span><span class="n">cnt</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">data</span><span class="p">[</span><span class="n">final</span><span class="p">[</span><span class="n">cnt</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1025.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1017. A除以B (20)]]></title>
    <link href="http://czczup.github.io/blog/20170218/pat-basic-level-1017/"/>
    <updated>2017-02-18T16:16:05+08:00</updated>
    <id>http://czczup.github.io/blog/20170218/pat-basic-level-1017</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。</p>

<!--more-->


<pre><code>输入格式：
输入在1行中依次给出A和B，中间以1空格分隔。

输出格式：
在1行中依次输出Q和R，中间以1空格分隔。

输入样例：
123456789050987654321 7

输出样例：
17636684150141093474 3
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li>本来是考的大整数处理的，用Python偷了个懒，简直是开挂。</li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">//</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1017.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1024. 科学计数法 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170218/pat-basic-level-1024/"/>
    <updated>2017-02-18T15:43:16+08:00</updated>
    <id>http://czczup.github.io/blog/20170218/pat-basic-level-1024</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式<code>[+-][1-9]"."[0-9]+E[+-][0-9]+</code>，即数字的整数部分只有1位，小数部分至少有1位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现以科学计数法的格式给出实数A，请编写程序按普通数字表示法输出A，并保证所有有效位都被保留。</p>

<pre><code>输入格式：
每个输入包含1个测试用例，即一个以科学计数法表示的实数A。该数字的存储长度不超过9999字节，且其指数的绝对值不超过9999。

输出格式：
对每个测试用例，在一行中按普通数字表示法输出A，并保证所有有效位都被保留，包括末尾的0。

输入样例1：
+1.23400E-03

输出样例1：
0.00123400

输入样例2：
-1.2E+10

输出样例2：
-12000000000
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>用'E'将输入的字符串分成<code>左串</code>和<code>右串</code>，从左串可计算得<code>小数长度 = 左串长度 - 3</code>，从右串可得指数的大小。</p></li>
<li><p>由<code>小数长度</code>和<code>指数的大小</code>可派生出三种情况：当<code>指数 &gt; 0 且 指数 &gt;= 小数长度</code>时，转化后需要去掉<code>'.'</code>,并在末尾补<code>'0'</code>；当<code>指数 &gt; 0 且 指数 &lt; 小数长度</code>时，需要将<code>'.'</code>右移；当<code>指数 &lt;= 0</code>时，需要先去掉<code>'.'</code>，在左侧补<code>'0'</code>,然后再在原处插入<code>'.'</code>。</p></li>
<li><p>注意<code>'+'</code>号不输出。</p></li>
<li><p>Python版本的最后一个测试点可能会超时，尝试了多次才通过。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">pop</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">listnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">){</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">listnum</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;\0&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">listnum</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">listnum</span><span class="p">[</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">append</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">listnum</span><span class="p">,</span><span class="kt">char</span> <span class="n">ch</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">listnum</span><span class="p">);</span>
</span><span class='line'>    <span class="n">listnum</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="n">listnum</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">listnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">char</span> <span class="n">ch</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">listnum</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="n">pos</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="n">listnum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">listnum</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">listnum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">10010</span><span class="p">],</span><span class="n">listnum</span><span class="p">[</span><span class="mi">20000</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;E&#39;</span><span class="p">){</span> <span class="c1">//记录E所在的下标</span>
</span><span class='line'>        <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">exp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">pos</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//记录指数的大小</span>
</span><span class='line'>        <span class="n">exp</span> <span class="o">=</span> <span class="n">exp</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">exp</span> <span class="o">=</span> <span class="o">-</span><span class="n">exp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">pos</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//从str中复制得到listnum</span>
</span><span class='line'>        <span class="n">listnum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">listnum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">decimal</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">listnum</span><span class="p">)</span> <span class="o">-</span> <span class="mi">3</span><span class="p">;;</span> <span class="c1">//小数部分长度</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">exp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">//指数大于0</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">exp</span> <span class="o">&gt;=</span> <span class="n">decimal</span><span class="p">){</span> <span class="c1">//指数大于小数长度</span>
</span><span class='line'>            <span class="n">pop</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//去掉&#39;.&#39;号</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">exp</span><span class="o">-</span><span class="n">decimal</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="sc">&#39;0&#39;</span><span class="p">);</span> <span class="c1">//末尾补&#39;0&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span> <span class="c1">//指数小于等于0</span>
</span><span class='line'>            <span class="n">pop</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//去掉&#39;.&#39;号</span>
</span><span class='line'>            <span class="n">insert</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">2</span> <span class="o">+</span> <span class="n">exp</span><span class="p">,</span><span class="sc">&#39;.&#39;</span><span class="p">);</span> <span class="c1">//把&#39;.&#39;号插入在2+exp处</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//指数小于等于0</span>
</span><span class='line'>        <span class="n">pop</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//去掉&#39;.&#39;号</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;-</span><span class="n">exp</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">insert</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="sc">&#39;0&#39;</span><span class="p">);</span> <span class="c1">//&#39;+&#39;或&#39;-&#39;后补&#39;0&#39;</span>
</span><span class='line'>        <span class="n">insert</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="sc">&#39;.&#39;</span><span class="p">);</span> <span class="c1">//原位置插入&#39;.&#39;号</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">listnum</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="p">){</span> <span class="c1">//&#39;+&#39;号不输出</span>
</span><span class='line'>        <span class="n">pop</span><span class="p">(</span><span class="n">listnum</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">listnum</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1024.png"></p>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">number</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;E&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">listnum</span> <span class="o">=</span> <span class="p">[</span><span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">]))]</span>
</span><span class='line'><span class="n">exp</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">decimal</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="mi">3</span> <span class="c"># 小数部分的长度</span>
</span><span class='line'><span class="k">if</span> <span class="n">exp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># 指数大于0</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exp</span> <span class="o">&gt;=</span> <span class="n">decimal</span><span class="p">:</span> <span class="c"># 指数大于小数长度</span>
</span><span class='line'>        <span class="n">listnum</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c"># 去掉&#39;.&#39;号</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">exp</span> <span class="o">-</span> <span class="n">decimal</span><span class="p">):</span>
</span><span class='line'>            <span class="n">listnum</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">)</span> <span class="c"># 末尾补&#39;0&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span> <span class="c"># 指数小于等于0</span>
</span><span class='line'>        <span class="n">listnum</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c"># 去掉&#39;.&#39;号</span>
</span><span class='line'>        <span class="n">listnum</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="n">exp</span><span class="p">,</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="c"># 把&#39;.&#39;号插入在2+exp处</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span> <span class="c"># 指数小于等于0</span>
</span><span class='line'>    <span class="n">listnum</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c"># 去掉&#39;.&#39;号</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">exp</span><span class="p">):</span>
</span><span class='line'>        <span class="n">listnum</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;0&#39;</span><span class="p">)</span> <span class="c"># &#39;+&#39;或&#39;-&#39;后补&#39;0&#39;</span>
</span><span class='line'>    <span class="n">listnum</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="c"># 原位置插入&#39;.&#39;号</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">listnum</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">&#39;+&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">listnum</span> <span class="o">=</span> <span class="n">listnum</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">listnum</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1024_2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1023. 组个最小数 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170217/pat-basic-level-1023/"/>
    <updated>2017-02-17T14:11:17+08:00</updated>
    <id>http://czczup.github.io/blog/20170217/pat-basic-level-1023</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意0不能做首位）。例如：给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现给定数字，请编写程序输出能够组成的最小的数。</p>

<pre><code>输入格式：
每个输入包含1个测试用例。每个测试用例在一行中给出10个非负整数，顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空格分隔。10个数字的总个数不超过50，且至少拥有1个非0的数字。

输出格式：
在一行中输出能够组成的最小的数。

输入样例：
2 2 0 0 0 3 0 0 1 0

输出样例：
10015558
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">amount</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="n">number</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">cnt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">amount</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">number</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="n">number</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'><span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">number</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">flag</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1023.png"></p>
]]></content>
  </entry>
  
</feed>
