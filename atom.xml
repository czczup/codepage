<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DeepIceCream]]></title>
  <link href="http://czczup.github.io/atom.xml" rel="self"/>
  <link href="http://czczup.github.io/"/>
  <updated>2018-02-21T22:01:23+08:00</updated>
  <id>http://czczup.github.io/</id>
  <author>
    <name><![CDATA[nonoka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1035. 插入与归并 (25)]]></title>
    <link href="http://czczup.github.io/blog/20180221/pat-basic-level-1035/"/>
    <updated>2018-02-21T16:39:42+08:00</updated>
    <id>http://czczup.github.io/blog/20180221/pat-basic-level-1035</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;根据维基百科的定义：</p>

<p>&#160; &#160; &#160; &#160;<strong>插入排序</strong>是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;<strong>归并排序</strong>进行如下迭代操作：首先将原始序列看成N个只包含1个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下1个有序的序列。</p>

<p>&#160; &#160; &#160; &#160;现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？</p>

<hr />

<h3>思路：</h3>

<ol>
<li><p>读入<code>lst1</code>和<code>lst2</code>后，先先判断是插入排序还是归并排序。由于插入排序的判断较为简单，从插入排序先入手。</p></li>
<li><p>在<code>lst2</code>中找到第一个<code>左&gt;右</code>的位置，判断<code>lst1</code>与<code>lst2</code>在该位置右侧的切片是否相等，若相等则是插入排序，反之是归并排序。</p></li>
<li><p>归并排序每次归并的数量<code>cnt</code>为2的倍数。我们将<code>lst2</code>视为未排序序列，对其从<code>cnt=2</code>开始进行归并排序：首先，对<code>lst2</code>按<code>cnt</code>进行切片；然后，再对每一个子列进行排序；最后，把所有数字汇总到<code>result</code>中。不断循环直到归并产生的结果发生变化，所得<code>result</code>即为下一轮归并的结果。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">lst1</span><span class="p">,</span><span class="n">lst2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lst2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lst2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">lst2</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lst1</span><span class="p">[</span><span class="n">flag</span><span class="p">:]</span> <span class="o">==</span> <span class="n">lst2</span><span class="p">[</span><span class="n">flag</span><span class="p">:]:</span> <span class="c"># 插入排序</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">lst1</span><span class="p">[:</span><span class="n">flag</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="n">lst2</span><span class="p">[</span><span class="n">flag</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span> <span class="c"># 再迭代一轮的结果</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span><span class="n">result</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span> <span class="c"># 归并排序</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">2</span> <span class="c"># 归并的数量</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">lst2</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">result</span> <span class="o">==</span> <span class="n">lst2</span><span class="p">:</span> <span class="c"># 不断归并排序直到顺序发送变化</span>
</span><span class='line'>            <span class="n">sub_lst</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sorted</span><span class="p">(</span><span class="n">lst2</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">cnt</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">lst2</span><span class="p">),</span><span class="n">cnt</span><span class="p">)]</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">sub_lst</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">]</span>
</span><span class='line'>            <span class="n">cnt</span> <span class="o">*=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span><span class="p">,</span><span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">lst1</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="n">lst2</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="n">flag</span><span class="p">,</span><span class="n">next_list</span> <span class="o">=</span> <span class="n">check</span><span class="p">(</span><span class="n">lst1</span><span class="p">,</span><span class="n">lst2</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Insertion Sort&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Merge Sort&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">next_list</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1035.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1068. 万绿丛中一点红 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180221/pat-basic-level-1068/"/>
    <updated>2018-02-21T14:58:01+08:00</updated>
    <id>http://czczup.github.io/blog/20180221/pat-basic-level-1068</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;对于计算机而言，颜色不过是像素点对应的一个24位的数值。现给定一幅分辨率为MxN的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围8个相邻像素的颜色差充分大。</p>

<!--more-->


<pre><code>输入格式：
输入第一行给出三个正整数，分别是M和N（&lt;= 1000），即图像的分辨率；以及TOL，是所求像素点与相邻点的颜色差阈值，色差超过TOL的点才被考虑。随后N行，每行给出M个像素的颜色值，范围在[0, 2^24)内。所有同行数字间用空格或TAB分开。

输出格式：
在一行中按照“(x, y): color”的格式输出所求像素点的位置以及颜色值，其中位置x和y分别是该像素在图像矩阵中的列、行编号（从1开始编号）。如果这样的点不唯一，则输出“Not Unique”；如果这样的点不存在，则输出“Not Exist”。

输入样例1：
8 6 200
0    0    0        0        0        0        0        0
65280    65280    65280    16711479 65280    65280    65280    65280
16711479 65280    65280    65280    16711680 65280    65280    65280
65280    65280    65280    65280    65280    65280    165280   165280
65280    65280    16777015 65280    65280    165280   65480    165280
16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215

输出样例1：
(5, 3): 16711680

输入样例2：
4 5 2
0 0 0 0
0 0 3 0
0 0 0 0
0 5 0 0
0 0 0 0

输出样例2：
Not Unique

输入样例3：
3 3 5
1 2 3
3 4 5
5 6 7

输出样例3：
Not Exist
</code></pre>

<hr />

<h3>思路：</h3>

<ol>
<li><p>在图像周围补一圈<code>0</code>，可避免数组越界，降低判断难度。在某些极端情况下，补<code>0</code>可能会对结果造成影响，不过在本题的测试点中不存在这种情况。</p></li>
<li><p>用<code>dic(Python)</code>或<code>map(C++)</code>记录每个数字出现的次数，查询哈希表的时间复杂度近似为<code>O(1)</code>，可以快速判断某个数字是否出现多次。</p></li>
<li><p>由C++的用时可知，<code>测试点4</code>的用时至少是其余测试点的<code>84倍</code>。因此在Python实现时，估计<code>测试点4</code>的用时在<code>1500ms</code>左右，远远大于本题的时间限制<code>500ms</code>。我估计这题用Python是没法通过了，等待大神来优化代码。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>C++语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">image</span><span class="p">[</span><span class="mi">1002</span><span class="p">][</span><span class="mi">1002</span><span class="p">];</span> <span class="c1">//在图片外围一圈0 </span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">judge</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">TOL</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">loc_x</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="n">loc_x</span><span class="o">&lt;=</span><span class="mi">1</span><span class="p">;</span><span class="n">loc_x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">loc_y</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="n">loc_y</span><span class="o">&lt;=</span><span class="mi">1</span><span class="p">;</span><span class="n">loc_y</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">loc_x</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">loc_y</span><span class="o">==</span><span class="mi">0</span><span class="p">)){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">-</span><span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="n">loc_x</span><span class="p">][</span><span class="n">y</span><span class="o">+</span><span class="n">loc_y</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="n">TOL</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">M</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">TOL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">M</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">TOL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">time</span><span class="p">[</span><span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span> <span class="c1">//统计每个数字的出现次数 </span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">temp_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">judge</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">TOL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">time</span><span class="p">[</span><span class="n">image</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="n">temp_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">//记录特殊点的坐标 </span>
</span><span class='line'>                <span class="n">temp_y</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>                <span class="n">cnt</span><span class="o">++</span><span class="p">;</span> <span class="c1">//统计特殊点的个数 </span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(%d, %d): %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">temp_x</span><span class="p">,</span><span class="n">temp_y</span><span class="p">,</span><span class="n">image</span><span class="p">[</span><span class="n">temp_x</span><span class="p">][</span><span class="n">temp_y</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not Exist&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not Unique&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1068.png"></p>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">judge</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">TOL</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">loc_x</span> <span class="ow">in</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">loc_y</span> <span class="ow">in</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">[</span><span class="n">loc_x</span><span class="p">,</span><span class="n">loc_y</span><span class="p">]</span> <span class="o">!=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">-</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="n">loc_y</span><span class="p">][</span><span class="n">x</span><span class="o">+</span><span class="n">loc_x</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="n">TOL</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">TOL</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="o">+</span><span class="mi">2</span><span class="p">)])</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">image</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="o">+</span><span class="mi">2</span><span class="p">)])</span>
</span><span class='line'><span class="n">result</span><span class="p">,</span><span class="n">time</span> <span class="o">=</span> <span class="p">[],{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">time</span><span class="p">:</span>
</span><span class='line'>            <span class="n">time</span><span class="p">[</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">time</span><span class="p">[</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">judge</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">TOL</span><span class="p">)</span> <span class="ow">and</span> <span class="n">time</span><span class="p">[</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="s">&quot;(&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;, &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;): &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">])])</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Not Exist&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Not Unique&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1068_2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1074. 宇宙无敌加法器 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180221/pat-basic-level-1074/"/>
    <updated>2018-02-21T12:30:42+08:00</updated>
    <id>http://czczup.github.io/blog/20180221/pat-basic-level-1074</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在PAT星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个PAT星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是7进制数、第2位是2进制数、第3位是5进制数、第4位是10进制数，等等。每一位的进制d或者是0（表示十进制）、或者是[2，9]区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT星人通常只需要记住前20位就够用了，以后各位默认为10进制。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203+415”呢？我们得首先计算最低位：3+5=8；因为最低位是7进制的，所以我们得到1和1个进位。第2位是：0+1+1（进位）=2；因为此位是2进制的，所以我们得到0和1个进位。第3位是：2+4+1（进位）=7；因为此位是5进制的，所以我们得到2和1个进位。第4位是：6+1（进位）=7；因为此位是10进制的，所以我们就得到7。最后我们得到：6203+415=7201。</p>

<pre><code>输入格式：
输入首先在第一行给出一个N位的进制表（0 &lt; N &lt;=20），以回车结束。 随后两行，每行给出一个不超过N位的正的PAT数。

输出格式：
在一行中输出两个PAT数之和。

输入样例：
30527
06203
415

输出样例：
7201
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">table</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span> <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">())]</span>
</span><span class='line'><span class="n">num1</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">)))]</span>
</span><span class='line'><span class="n">num2</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">)))]</span>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">sum</span> <span class="o">=</span> <span class="n">num1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">num2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">temp</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">sum</span> <span class="o">&gt;=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span> <span class="c"># 需要进位</span>
</span><span class='line'>        <span class="n">num</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span> <span class="o">%</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">num</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="nb">sum</span> <span class="o">//</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c"># 进位</span>
</span><span class='line'><span class="n">num</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'><span class="n">num</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">num</span><span class="p">])))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1074.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1071. 小赌怡情 (15)]]></title>
    <link href="http://czczup.github.io/blog/20180221/pat-basic-level-1071/"/>
    <updated>2018-02-21T11:25:56+08:00</updated>
    <id>http://czczup.github.io/blog/20180221/pat-basic-level-1071</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注t个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家t个筹码；否则扣除玩家t个筹码。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。</p>

<pre><code>输入格式：
输入在第一行给出2个正整数T和K（&lt;=100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后K行，每行对应一次游戏，顺序给出4个数字：
n1 b t n2
其中n1和n2是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。b为0表示玩家赌“小”，为1表示玩家赌“大”。t表示玩家下注的筹码数，保证在整型范围内。

输出格式：
对每一次游戏，根据下列情况对应输出（其中t是玩家下注量，x是玩家当前持有的筹码量）：
玩家赢，输出
Win t!  Total = x.
玩家输，输出
Lose t.  Total = x.
玩家下注超过持有的筹码量，输出
Not enough tokens.  Total = x.
玩家输光后，输出
Game Over.
并结束程序。

输入样例1：
100 4
8 0 100 2
3 1 50 1
5 1 200 6
7 0 200 8

输出样例1：
Win 100!  Total = 200.
Lose 50.  Total = 150.
Not enough tokens.  Total = 150.
Not enough tokens.  Total = 150.

输入样例2：
100 4
8 0 100 2
3 1 200 1
5 1 200 6
7 0 200 8

输出样例2：
Win 100!  Total = 200.
Lose 200.  Total = 0.
Game Over.
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">T</span><span class="p">,</span><span class="n">K</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">T</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n1</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">n2</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">t</span><span class="o">&gt;</span><span class="n">x</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Not enough tokens.  Total = &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n2</span> <span class="o">&gt;</span> <span class="n">n1</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c"># 赌大</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">+=</span> <span class="n">t</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Win &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;!  Total = &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n1</span> <span class="o">&gt;</span> <span class="n">n2</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># 赌小</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">+=</span> <span class="n">t</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Win &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;!  Total = &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">-=</span> <span class="n">t</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Lose &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;.  Total = &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Game Over.&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1071.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1073. 多选题常见计分法 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180221/pat-basic-level-1073/"/>
    <updated>2018-02-21T10:26:11+08:00</updated>
    <id>http://czczup.github.io/blog/20180221/pat-basic-level-1073</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到50%分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。</p>

<!--more-->


<pre><code>输入格式：
输入在第一行给出两个正整数N（&lt;=1000）和M（&lt;=100），分别是学生人数和多选题的个数。随后M行，每行顺次给出一道题的满分值（不超过5的正整数）、选项个数（不少于2且不超过5的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母a开始顺次排列。各项间以1个空格分隔。最后N行，每行给出一个学生的答题情况，其每题答案格式为“(选中的选项个数 选项1 ……)”，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。

输出格式：
按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后1位。最后输出错得最多的题目选项的信息，格式为：“错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号”。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出“Too simple”。

输入样例1：
3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (3 b d e) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (1 c) (4 a b c d)

输出样例1：
3.5
6.0
2.5
2 2-e
2 3-a
2 3-b

输入样例2：
2 2 
3 4 2 a c
2 5 1 b
(2 a c) (1 b)
(2 a c) (1 b)

输出样例2：
5.0
5.0
Too simple
</code></pre>

<hr />

<h3>思路：</h3>

<ol>
<li><p>根据题目要求编写<code>question类</code>，用<code>self.number</code>存储题目编号，用<code>self.score</code>存储题目分值，用<code>self.option</code>存储选项相关数据，用<code>self.dic</code>存储各个选项的错误次数。</p></li>
<li><p>在<code>self.dic</code>中，键的数量由选项的数量生成，正确选项的错误次数初始化为<code>N</code>，错误选项的错误次数初始化为<code>0</code>。注意，这样初始化的原因是，不仅是错误选项被选算一次错误，正确选项未选也是一次错误。</p></li>
<li><p>定义<code>check(options)</code>方法，传入学生选择的答案，与正确答案进行比对。若学生选择的某一选项在正确答案中不存在，则本题错误，该<code>key</code>对应的<code>value++</code>；若选择的选项是正确答案之一，该<code>key</code>对应的<code>value--</code>。</p></li>
<li><p>全部正确<code>return self.score</code>，部分正确<code>return self.score*0.5</code>，存在错误<code>return 0</code>。</p></li>
<li><p>一行代码取得<code>lst</code>中所有<code>question.dic</code>中的<code>value</code>的最大值：<code>max_false = max([max(question.dic.items(),key=lambda x:x[1])[1] for question in lst])</code>。</p></li>
<li><p>取出错误次数最大的非0记录，储存在<code>result</code>中，对<code>result</code>按题目编号递增顺序排序；若并列则按选项号递增顺序排序。若<code>result</code>不为空，则输出<code>"错误次数 题目编号-选项号"</code>。若为空，则输出<code>"Too simple"</code>。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">N</span><span class="p">,</span><span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span> <span class="c"># 学生人数、多选题的个数</span>
</span><span class='line'><span class="k">class</span> <span class="nc">question</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">number</span><span class="p">,</span><span class="n">score</span><span class="p">,</span><span class="n">op_num</span><span class="p">,</span><span class="n">true_op_num</span><span class="p">,</span><span class="n">true_op</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="c"># 题目编号</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span> <span class="c"># 题目分值</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">option</span> <span class="o">=</span> <span class="p">[</span><span class="n">op_num</span><span class="p">,</span><span class="n">true_op_num</span><span class="p">,</span><span class="n">true_op</span><span class="p">]</span> <span class="c"># 选项数，正确选项数，正确答案</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span> <span class="c"># 存储各个选项的错误次数</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">op_num</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="mi">97</span><span class="o">+</span><span class="n">i</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># 根据选项数生成字典，错误答案错误次数初始化为0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">option</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">option</span><span class="p">]</span> <span class="o">=</span> <span class="n">N</span> <span class="c"># 正确答案错误次数初始化为N</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">options</span><span class="p">):</span>
</span><span class='line'>        <span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">op</span> <span class="ow">in</span> <span class="n">options</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">op</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">option</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span> <span class="c"># 选择错误</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">op</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># 错误选项被选择的次数</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">op</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span> <span class="c"># 正确选项被选择的次数</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">flag</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span> <span class="c"># 得0分</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">options</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">option</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="c"># 得满分</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="o">*</span><span class="mf">0.5</span> <span class="c"># 得一半分</span>
</span><span class='line'>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
</span><span class='line'>    <span class="n">score</span><span class="p">,</span><span class="n">op_num</span><span class="p">,</span><span class="n">true_op_num</span><span class="p">,</span><span class="o">*</span><span class="n">true_op</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">question</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">score</span><span class="p">),</span><span class="nb">int</span><span class="p">(</span><span class="n">op_num</span><span class="p">),</span><span class="nb">int</span><span class="p">(</span><span class="n">true_op_num</span><span class="p">),</span><span class="n">true_op</span><span class="p">))</span> <span class="c"># 生成question对象存在lst中</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">answers</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;) (&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">grade</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
</span><span class='line'>        <span class="n">_</span><span class="p">,</span><span class="o">*</span><span class="n">answer</span> <span class="o">=</span> <span class="n">answers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="n">grade</span> <span class="o">+=</span> <span class="n">lst</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="c"># 计算每个学生的总分</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%.1f</span><span class="s">&quot;</span><span class="o">%</span><span class="n">grade</span><span class="p">)</span>
</span><span class='line'><span class="n">max_false</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="nb">max</span><span class="p">(</span><span class="n">question</span><span class="o">.</span><span class="n">dic</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">question</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">])</span> <span class="c"># 错误次数最大值</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">dic</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">==</span> <span class="n">max_false</span> <span class="ow">and</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">dic</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># 取出错误次数最大的非0记录</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">max_false</span><span class="p">,</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">number</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">number</span><span class="p">])</span> <span class="c"># 错误次数 题目编号-选项号</span>
</span><span class='line'><span class="k">if</span> <span class="n">result</span> <span class="o">!=</span> <span class="p">[]:</span> <span class="c"># 若存在错误记录</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">item</span><span class="p">:(</span><span class="n">item</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="n">item</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="c"># 按题目编号递增顺序输出；再并列则按选项号递增顺序输出。</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">question</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">question</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nb">str</span><span class="p">(</span><span class="n">question</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="s">&quot;-&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">question</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span> <span class="c"># 所有题目都没有人错</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Too simple&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1073.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1080. MOOC期终成绩 (25)]]></title>
    <link href="http://czczup.github.io/blog/20180220/pat-basic-level-1080/"/>
    <updated>2018-02-20T15:30:42+08:00</updated>
    <id>http://czczup.github.io/blog/20180220/pat-basic-level-1080</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;对于在中国大学MOOC<code>（http://www.icourse163.org/）</code>学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为<code>G = (G期中 x 40% + G期末 x 60%)</code>，如果<code>G期中 &gt; G期末</code>；否则总评 G 就是 G期末。这里 G期中 和 G期末 分别为学生的期中和期末成绩。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。</p>

<pre><code>输入格式：
输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。
接下来有三块输入。第一块包含 P 个在线编程成绩 G编程；第二块包含 M 个期中考试成绩 G期中；第三块包含 N 个期末考试成绩 G期末。每个成绩占一行，格式为：学生学号 分数。其中学生学号为不超过20个字符的英文字母和数字；分数是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。

输出格式：
打印出获得合格证书的学生名单。每个学生占一行，格式为：
学生学号 G编程 G期中 G期末 G
如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“-1”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。

输入样例：
6 6 7
01234 880
a1903 199
ydjh2 200
wehu8 300
dx86w 220
missing 400
ydhfu77 99
wehu8 55
ydjh2 98
dx86w 88
a1903 86
01234 39
ydhfu77 88
a1903 66
01234 58
wehu8 84
ydjh2 82
missing 99
dx86w 81

输出样例：
missing 400 -1 99 99
ydjh2 200 98 82 88
dx86w 220 88 81 84
wehu8 300 55 84 84
</code></pre>

<hr />

<h3>思路：</h3>

<ol>
<li><p>由于时间限制较短<code>（只有100ms）</code>，要使用查询速度较快的数据结构，所以使用字典来存储信息。</p></li>
<li><p>字典每一项的<code>key</code>为<code>学生学号</code>，<code>value</code>为<code>[学生学号,G编程,G期中,G期末,G]</code>格式数据。通过三轮循环查缺补漏可将字典补充完整。</p></li>
<li><p>由于输出顺序为按照总评分数递减。若有并列，则按学号递增。所以使用<code>lambda表达式</code>进行排序。</p></li>
<li><p>多次修改后以98ms通过，差一点就过不了了hhh。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">P</span><span class="p">,</span><span class="n">M</span><span class="p">,</span><span class="n">N</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">P</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span><span class="n">G_p</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">G_p</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span><span class="n">G_mid</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">G_mid</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span><span class="n">G_end</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">G_end</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">stu</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">3</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mf">0.4</span> <span class="o">+</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="mf">0.6</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">dic</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:(</span><span class="o">-</span><span class="n">dic</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">dic</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'><span class="k">for</span> <span class="n">stu</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">3</span><span class="p">],</span><span class="n">dic</span><span class="p">[</span><span class="n">stu</span><span class="p">][</span><span class="mi">4</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1080.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1055. 集体照 (25)]]></title>
    <link href="http://czczup.github.io/blog/20180220/pat-basic-level-1055/"/>
    <updated>2018-02-20T13:04:49+08:00</updated>
    <id>http://czczup.github.io/blog/20180220/pat-basic-level-1055</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;拍集体照时队形很重要，这里对给定的N个人K排的队形设计排队规则如下：</p>

<ul>
<li>每排人数为N/K（向下取整），多出来的人全部站在最后一排；</li>
<li>后排所有人的个子都不比前排任何人矮；</li>
<li>每排中最高者站中间（中间位置为m/2+1，其中m为该排人数，除法向下取整）；</li>
<li>每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；</li>
<li>若多人身高相同，则按名字的字典序升序排列。这里保证无重名。</li>
</ul>


<!--more-->


<p>&#160; &#160; &#160; &#160;现给定一组拍照人，请编写程序输出他们的队形。</p>

<hr />

<h3>思路：</h3>

<ol>
<li><p>用<code>sort()</code>方法对列表进行排序，在Python3中取消了自定义<code>cmp()</code>函数进行排序的功能，取而代之的是用<code>key = lambda表达式</code>进行排序。</p></li>
<li><p>由于本题中，首先要按身高进行降序排序，在身高相同时，要按名字的字典序升序排列，单单使用<code>reverse=True</code>无法实现。所以可以对身高的负数进行升序排列，从而实现了身高的降序排列。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">N</span><span class="p">,</span><span class="n">K</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="n">persons</span> <span class="o">=</span> <span class="p">[</span><span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
</span><span class='line'><span class="n">persons</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">person</span><span class="p">:(</span><span class="o">-</span><span class="nb">int</span><span class="p">(</span><span class="n">person</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="n">person</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'><span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="n">N</span> <span class="o">%</span> <span class="n">K</span> <span class="o">+</span> <span class="n">N</span> <span class="o">//</span> <span class="n">K</span> <span class="c"># 最后一排人数</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="n">K</span> <span class="c"># 其他排的人数</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">j</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">line</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">persons</span><span class="p">[</span><span class="n">cnt</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="c"># 在右边插入</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">line</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">persons</span><span class="p">[</span><span class="n">cnt</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="c"># 在左边插入</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1055.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1034. 有理数四则运算 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180213/pat-basic-level-1034/"/>
    <updated>2018-02-13T22:44:16+08:00</updated>
    <id>http://czczup.github.io/blog/20180213/pat-basic-level-1034</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求编写程序，计算2个有理数的和、差、积、商。</p>

<!--more-->


<pre><code>输入格式：
输入在一行中按照“a1/b1 a2/b2”的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为0。

输出格式：
分别在4行中按照“有理数1 运算符 有理数2 = 结果”的格式顺序输出2个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式“k a/b”，其中k是整数部分，a/b是最简分数部分；若为负数，则须加括号；若除法分母为0，则输出“Inf”。题目保证正确的输出中没有超过整型范围的整数。

输入样例1：
2/3 -4/2

输出样例1：
2/3 + (-2) = (-1 1/3)
2/3 - (-2) = 2 2/3
2/3 * (-2) = (-1 1/3)
2/3 / (-2) = (-1/3)

输入样例2：
5/3 0/6

输出样例2：
1 2/3 + 0 = 1 2/3
1 2/3 - 0 = 1 2/3
1 2/3 * 0 = 0
1 2/3 / 0 = Inf
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>推导分数加法公式：$ \frac{symbol_1\times{a}}{b} + \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} + symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数减法公式：$ \frac{symbol_1\times{a}}{b} - \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} - symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数乘法公式：$ \frac{symbol_1\times{a}}{b} \times  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ac}}{bd} $。</p></li>
<li><p>推导分数除法公式：$ \frac{symbol_1\times{a}}{b} \div  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ad}}{bc} $。</p></li>
<li><p>读入数据，若<code>numerator</code>或<code>denominator</code>小于0，则<code>symbol</code>初始化为<code>"-"</code>,否则初始化为<code>""</code>。</p></li>
<li><p>用辗转相除法求最大公约数<code>maxnum</code>。</p></li>
<li><p>根据上述公式实现<code>add(num)</code>、<code>sub(num)</code>、<code>mul(num)</code>、<code>div(num)</code>方法。</p></li>
<li><p>实现<code>simplify()</code>分数化简方法，在加减乘除运算之后进行分数化简。首先，计算分数的整数部分：<code>integer = numerator // denominator</code>；然后，更新分数的分子：<code>numerator -= integer * denominator</code>；接着，更新分数的分子：<code>numerator = numerator // maxnum</code>；之后，更新分数的分母：<code>denominator = denominator // maxnum</code>；最后，根据整数、分子、分母三部分是否为0生成字符串<code>value</code>。</p></li>
<li><p>输出化简后的分数，若为负数则在数字两端额外输出括号。</p></li>
</ol>


<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">number</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="s">&quot;-&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">%</span><span class="n">a</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">simplify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Inf&quot;</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">maxnum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span> <span class="c"># 最大公约数</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">-=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">denominator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">numerator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">input_num</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="n">num1</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
</span><span class='line'><span class="n">num2</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'><span class="n">num_add</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_sub</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_mul</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_div</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">num</span><span class="o">.</span><span class="n">simplify</span><span class="p">()</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">num1</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="n">num_add</span><span class="p">,</span><span class="n">num_sub</span><span class="p">,</span><span class="n">num_mul</span><span class="p">,</span><span class="n">num_div</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;+&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_add</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;-&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_sub</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;*&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_mul</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="s">&quot;/&quot;</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">num_div</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1034.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1072. 开学寄语 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1072/"/>
    <updated>2018-02-04T16:48:32+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1072</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其QQ，封其电脑，夺其手机，收其ipad，断其wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！</p>

<!--more-->




<center><img src="http://czczup.github.io/images/patb/1072.jpg"></center>


<p></p>

<p>&#160; &#160; &#160; &#160;本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。</p>

<pre><code>输入格式：
输入第一行给出两个正整数N（&lt;= 1000）和M（&lt;= 6），分别是学生人数和需要被查缴的物品种类数。第二行给出M个需要被查缴的物品编号，其中编号为4位数字。随后N行，每行给出一位学生的姓名缩写（由1-4个大写英文字母组成）、个人物品数量K（0 &lt;= K &lt;= 10）、以及K个物品的编号。

输出格式：
顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：
姓名缩写: 物品编号1 物品编号2 ……
最后一行输出存在问题的学生的总人数和被查缴物品的总数。

输入样例：
4 2
2333 6666
CYLL 3 1234 2345 3456
U 4 9966 6666 8888 6666
GG 2 2333 7777
JJ 3 0012 6666 2333

输出样例：
U: 6666 6666
GG: 2333
JJ: 6666 2333
3 5
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">N</span><span class="p">,</span><span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="n">check_lst</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">num_person</span><span class="p">,</span><span class="n">num_good</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="o">*</span><span class="n">goods</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">good</span> <span class="ow">in</span> <span class="n">goods</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">good</span> <span class="ow">in</span> <span class="n">check_lst</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">flag</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;:&quot;</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="n">good</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">num_good</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">flag</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">num_person</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num_person</span><span class="p">,</span><span class="n">num_good</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1072.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1076. Wifi密码 (15)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1076/"/>
    <updated>2018-02-04T14:44:00+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1076</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用wifi，又怕耽误亲们的学习，现将wifi密码设置为下列数学题答案：<code>A-1</code>；<code>B-2</code>；<code>C-3</code>；<code>D-4</code>；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成wifi的密码。这里简单假设每道选择题都有4个选项，有且只有1个正确答案。</p>

<!--more-->




<center><img src="http://czczup.github.io/images/patb/1076.jpg"></center>


<p></p>

<pre><code>输入格式：
输入第一行给出一个正整数N（&lt;= 100），随后N行，每行按照“编号-答案”的格式给出一道题的4个选项，“T”表示正确选项，“F”表示错误选项。选项间用空格分隔。

输出格式：
在一行中输出wifi密码。

输入样例：
8
A-T B-F C-F D-F
C-T B-F A-F D-F
A-F D-F C-F B-T
B-T A-F C-F D-F
B-F D-T A-F C-F
A-T C-F B-F D-F
D-T B-F C-F A-F
C-T A-F B-F D-F

输出样例：
13224143
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">alpha_to_number</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;A&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s">&#39;B&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="s">&#39;C&#39;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="s">&#39;D&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">answers</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">answer</span> <span class="ow">in</span> <span class="n">answers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">answer</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span> <span class="o">=</span> <span class="n">answer</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">alpha_to_number</span><span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]],</span><span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1076.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1077. 互评成绩计算 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1077/"/>
    <updated>2018-02-04T14:35:59+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1077</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 G1；老师给这个组的评分记为 G2。该组得分为<code>(G1+G2)/2</code>，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。</p>

<!--more-->


<pre><code>输入格式：
输入第一行给出两个正整数N（&gt; 3）和M，分别是分组数和满分，均不超过100。随后N行，每行给出该组得到的N个分数（均保证为整型范围内的整数），其中第1个是老师给出的评分，后面 N-1 个是其他组给的评分。合法的输入应该是[0, M]区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有3个来自同学的合法评分。

输出格式：
为每个组输出其最终得分。每个得分占一行。

输入样例：
6 50
42 49 49 35 38 41
36 51 50 28 -1 30
40 36 41 33 47 49
30 250 -25 27 45 31
48 0 0 50 50 1234
43 41 36 29 42 29

输出样例：
42
33
41
31
37
39
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">N</span><span class="p">,</span><span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">G2</span><span class="p">,</span><span class="o">*</span><span class="n">score</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># 记录合法的同学评分</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">score</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">score</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">:</span>
</span><span class='line'>            <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">score</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>    <span class="n">lst</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span> <span class="c"># 去掉一个最高分</span>
</span><span class='line'>    <span class="n">lst</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span> <span class="c"># 去掉一个最低分</span>
</span><span class='line'>    <span class="n">G1</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="nb">round</span><span class="p">((</span><span class="n">G1</span> <span class="o">+</span> <span class="n">G2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mf">0.001</span><span class="p">)</span> <span class="c"># 四舍五入</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1077.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1078. 字符串压缩与解压 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1078/"/>
    <updated>2018-02-04T14:00:41+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1078</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 ccccc 就用 5c 来表示。如果字符没有重复，就原样输出。例如 aba 压缩后仍然是 aba。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;解压方法就是反过来，把形如 5c 这样的表示恢复为 ccccc。</p>

<p>&#160; &#160; &#160; &#160;本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。</p>

<pre><code>输入格式：
输入第一行给出一个字符，如果是 C 就表示下面的字符串需要被压缩；如果是 D 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过1000个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过1MB。

输出格式：
根据要求压缩或解压字符串，并在一行中输出结果。

输入样例 1：
C
TTTTThhiiiis isssss a   tesssst CAaaa as

输出样例 1：
5T2h4is i5s a3 te4st CA3a as

输入样例 2：
D
5T2h4is i5s a3 te4st CA3a as10Z

输出样例 2：
TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">ch</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">lst</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">ch</span><span class="p">:</span>
</span><span class='line'>            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span><span class="o">+</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'>            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">ch</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">string</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span>  <span class="c"># 找数字</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span> <span class="c">#成功找到数字</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">j</span><span class="p">])</span>  <span class="c"># 切割数字</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">num</span>    <span class="c"># 解压缩</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>   <span class="c"># 判断边界</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">isdigit</span><span class="p">():</span> <span class="c"># 不是数字</span>
</span><span class='line'>            <span class="n">s</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&#39;C&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">compress</span><span class="p">(</span><span class="n">string</span> <span class="o">+</span> <span class="s">&quot;*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">decompress</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1078.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1079. 延迟的回文数 (20)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1079/"/>
    <updated>2018-02-04T13:02:02+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1079</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一个 k+1 位的正整数 N，写成 a<sub>k</sub>&hellip;a<sub>1</sub>a<sub>0</sub> 的形式，其中对所有 i 有 0 &lt;= a<sub>i</sub> &lt; 10 且 a<sub>k</sub> &gt; 0。N 被称为一个<b>回文数</b>，当且仅当对所有 i 有 a<sub>i</sub> = a<sub>k-i</sub>。零也被定义为一个回文数。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为延迟的回文数。（定义翻译自<code>https://en.wikipedia.org/wiki/Palindromic_number</code>）</p>

<p>&#160; &#160; &#160; &#160;给定任意一个正整数，本题要求你找到其变出的那个回文数。</p>

<pre><code>输入格式：
输入在一行中给出一个不超过1000位的正整数。

输出格式：
对给定的整数，一行一行输出其变出回文数的过程。每行格式如下
A + B = C
其中A是原始的数字，B是A的逆转数，C是它们的和。A从输入的整数开始。重复操作直到C在10步以内变成回文数，这时在一行中输出“C is a palindromic number.”；或者如果10步都没能得到回文数，最后就在一行中输出“Not found in 10 iterations.”。

输入样例 1：
97152

输出样例 1：
97152 + 25179 = 122331
122331 + 133221 = 255552
255552 is a palindromic number.

输入样例 2：
196

输出样例 2：
196 + 691 = 887
887 + 788 = 1675
1675 + 5761 = 7436
7436 + 6347 = 13783
13783 + 38731 = 52514
52514 + 41525 = 94039
94039 + 93049 = 187088
187088 + 880781 = 1067869
1067869 + 9687601 = 10755470
10755470 + 07455701 = 18211171
Not found in 10 iterations.
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">is_palindrome</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">m</span><span class="o">=</span><span class="n">n</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">==</span><span class="n">m</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_palindrome</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="s">&quot;is a palindromic number.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">num_re</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">num</span> <span class="o">+</span> <span class="n">num_re</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="s">&quot;+&quot;</span><span class="p">,</span><span class="n">num_re</span><span class="p">,</span><span class="s">&quot;=&quot;</span><span class="p">,</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">result</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Not found in 10 iterations.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1079.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1075. 链表元素分类 (25)]]></title>
    <link href="http://czczup.github.io/blog/20180204/pat-basic-level-1075/"/>
    <updated>2018-02-04T11:21:42+08:00</updated>
    <id>http://czczup.github.io/blog/20180204/pat-basic-level-1075</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而[0, K]区间内的元素都排在大于K的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为<code>18→7→-4→0→5→-6→10→11→-2</code>，K为10，则输出应该为 <code>-4→-6→-2→7→0→5→10→18→11</code>。</p>

<!--more-->


<pre><code>输入格式：
每个输入包含1个测试用例。每个测试用例第1行给出：第1个结点的地址；结点总个数，即正整数N (&lt;= 105)；以及正整数K (&lt;=1000)。结点的地址是5位非负整数，NULL地址用-1表示。
接下来有N行，每行格式为：
Address Data Next
其中Address是结点地址；Data是该结点保存的数据，为[-105, 105]区间内的整数；Next是下一结点的地址。题目保证给出的链表不为空。

输出格式：
对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 9 10
23333 10 27777
00000 0 99999
00100 18 12309
68237 -6 23333
33218 -4 00000
48652 -2 -1
99999 5 68237
27777 11 48652
12309 7 33218

输出样例：
33218 -4 68237
68237 -6 48652
48652 -2 12309
12309 7 00000
00000 0 99999
99999 5 23333
23333 10 00100
00100 18 27777
27777 11 -1
</code></pre>

<hr />

<h3>思路：</h3>

<ol>
<li>Python版本<code>测试点5</code>运行超时。</li>
</ol>


<hr />

<figure class='code'><figcaption><span>C++语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;  </span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">,</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">list</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">K</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">start</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">K</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">address</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">address</span><span class="p">);</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">list</span><span class="p">[</span><span class="n">address</span><span class="p">].</span><span class="n">data</span><span class="p">,</span><span class="o">&amp;</span><span class="n">list</span><span class="p">[</span><span class="n">address</span><span class="p">].</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">start</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">start</span><span class="p">].</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">data</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&lt;=</span> <span class="n">K</span><span class="p">)</span>
</span><span class='line'>            <span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">v</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">start</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%05d %d &quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">list</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]].</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%05d</span><span class="se">\n</span><span class="s">%05d %d &quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">list</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]].</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1075.png"></p>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">point</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">start</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">K</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">Address</span><span class="p">,</span><span class="n">Data</span><span class="p">,</span><span class="n">Next</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">address</span><span class="p">[</span><span class="n">Address</span><span class="p">]</span> <span class="o">=</span> <span class="n">Data</span>
</span><span class='line'>    <span class="n">point</span><span class="p">[</span><span class="n">Data</span><span class="p">]</span> <span class="o">=</span> <span class="n">Next</span>
</span><span class='line'>
</span><span class='line'><span class="n">less_than_zero</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">zero_to_K</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">more_than_K</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">start</span><span class="o">!=-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">address</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">less_than_zero</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">address</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">address</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">K</span><span class="p">:</span>
</span><span class='line'>        <span class="n">zero_to_K</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">more_than_K</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="n">point</span><span class="p">[</span><span class="n">address</span><span class="p">[</span><span class="n">start</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">lst</span> <span class="o">=</span> <span class="n">less_than_zero</span> <span class="o">+</span> <span class="n">zero_to_K</span> <span class="o">+</span> <span class="n">more_than_K</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%05d</span><span class="s">&quot;</span><span class="o">%</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">address</span><span class="p">[</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span><span class="s">&quot;</span><span class="si">%05d</span><span class="s">&quot;</span><span class="o">%</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%05d</span><span class="s">&quot;</span> <span class="o">%</span><span class="n">lst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">address</span><span class="p">[</span><span class="n">lst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1075_2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1069. 微博转发抽奖 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170519/pat-basic-level-1069/"/>
    <updated>2017-05-19T20:18:34+08:00</updated>
    <id>http://czczup.github.io/blog/20170519/pat-basic-level-1069</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;小明PAT考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔N个人就发出一个红包。请你编写程序帮助他确定中奖名单。</p>

<!--more-->


<pre><code>输入格式：
输入第一行给出三个正整数M（&lt;= 1000）、N和S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从1开始）。随后M行，顺序给出转发微博的网友的昵称（不超过20个字符、不包含空格回车的非空字符串）。
注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。

输出格式：
按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出“Keep going...”。

输入样例1：
9 3 2
Imgonnawin!
PickMe
PickMeMeMeee
LookHere
Imgonnawin!
TryAgainAgain
TryAgainAgain
Imgonnawin!
TryAgainAgain

输出样例1：
PickMe
Imgonnawin!
TryAgainAgain

输入样例2：
2 3 5
Imgonnawin!
PickMe

输出样例2：
Keep going...
</code></pre>

<hr />

<figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)]</span> <span class="c"># 转发总量、中奖间隔、第一位中奖者序号</span>
</span><span class='line'><span class="n">get</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">mark</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c"># 用字典记录是否中过奖</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="n">get</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'>    <span class="n">mark</span><span class="p">[</span><span class="n">get</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">False</span> <span class="c"># 均标记为未中过奖</span>
</span><span class='line'><span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span> <span class="c"># 没有人中奖</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">mark</span><span class="p">[</span><span class="n">get</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mark</span><span class="p">[</span><span class="n">get</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">get</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># 整体后移</span>
</span><span class='line'><span class="k">if</span> <span class="n">flag</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Keep going...&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1069.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1070. 结绳 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170501/pat-basic-level-1070/"/>
    <updated>2017-05-01T22:55:48+08:00</updated>
    <id>http://czczup.github.io/blog/20170501/pat-basic-level-1070</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。</p>

<!--more-->




<center><img src="http://czczup.github.io/images/patb/1070.jpg"></center>


<p></p>

<p>&#160; &#160; &#160; &#160;给定N段绳子的长度，你需要找出它们能串成的绳子的最大长度。</p>

<pre><code>输入格式：
每个输入包含1个测试用例。每个测试用例第1行给出正整数N (2 &lt;= N &lt;= 104)；第2行给出N个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过104。

输出格式：
在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。

输入样例：
8
10 15 12 3 4 13 1 15

输出样例：
14
</code></pre>

<hr />

<figure class='code'><figcaption><span>C++语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">length</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">length</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">length</span><span class="p">,</span><span class="n">length</span><span class="o">+</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="n">len</span> <span class="o">=</span> <span class="n">length</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mf">2.0</span> <span class="o">+</span> <span class="n">length</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="mf">2.0</span> <span class="o">+</span> <span class="n">length</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1070.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1045. 快速排序 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170501/pat-basic-level-1045/"/>
    <updated>2017-05-01T22:24:32+08:00</updated>
    <id>http://czczup.github.io/blog/20170501/pat-basic-level-1045</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的N个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;例如给定N = 5, 排列是<code>1、3、2、4、5</code>。则：</p>

<ul>
<li>1的左边没有元素，右边的元素都比它大，所以它可能是主元；</li>
<li>尽管3的左边元素都比它小，但是它右边的2它小，所以它不能是主元；</li>
<li>尽管2的右边元素都比它大，但其左边的3比它大，所以它不能是主元；</li>
<li>类似原因，4和5都可能是主元。</li>
</ul>


<p>&#160; &#160; &#160; &#160;因此，有3个元素可能是主元。</p>

<pre><code>输入格式：
输入在第1行中给出一个正整数N（&lt;= 105）； 第2行是空格分隔的N个不同的正整数，每个数不超过109。

输出格式：
在第1行中输出有可能是主元的元素个数；在第2行中按递增顺序输出这些元素，其间以1个空格分隔，行末不得有多余空格。

输入样例：
5
1 3 2 4 5

输出样例：
3
1 4 5
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">left</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">right</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">num</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//从左往右判断</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">max</span><span class="p">){</span>
</span><span class='line'>            <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span> <span class="c1">//从右往左判断</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">min</span><span class="p">){</span>
</span><span class='line'>            <span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">min</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//搜索两个&#39;1&#39;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">result</span><span class="o">+</span><span class="n">cnt</span><span class="p">);</span> <span class="c1">//递增排序</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">cnt</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cnt</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %d&quot;</span><span class="p">,</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1045.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1058. 选择题 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170501/pat-basic-level-1058/"/>
    <updated>2017-05-01T19:45:47+08:00</updated>
    <id>http://czczup.github.io/blog/20170501/pat-basic-level-1058</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。</p>

<!--more-->


<pre><code>输入格式：
输入在第一行给出两个正整数N（&lt;=1000）和M（&lt;=100），分别是学生人数和多选题的个数。随后M行，每行顺次给出一道题的满分值（不超过5的正整数）、选项个数（不少于2且不超过5的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母a开始顺次排列。各项间以1个空格分隔。最后N行，每行给出一个学生的答题情况，其每题答案格式为“(选中的选项个数 选项1 ……)”，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。

输出格式：
按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从1开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出“Too simple”。

输入样例：
3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (2 b d) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (2 b c) (4 a b c d)

输出样例：
3
6
5
2 2 3 4
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">;</span> <span class="c1">//学生人数、多选题的个数</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*读入题目数据*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">full_score</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">amount</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">true_amount</span><span class="p">[</span><span class="n">M</span><span class="p">];</span> <span class="c1">//满分值、选项个数、正确选项个数</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">true_answer</span><span class="p">[</span><span class="n">M</span><span class="p">][</span><span class="mi">20</span><span class="p">],</span><span class="n">answer</span><span class="p">[</span><span class="n">M</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span> <span class="c1">//正确答案、学生给出的答案，因为读入了空格，需要额外的存储空间 </span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d &quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">full_score</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="o">&amp;</span><span class="n">amount</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="o">&amp;</span><span class="n">true_amount</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">gets</span><span class="p">(</span><span class="n">true_answer</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*读入学生数据并判断对错*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">get_score</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">false_amount</span><span class="p">[</span><span class="n">M</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//第i个人 </span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span> <span class="c1">//第j个题目 </span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">temp</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;(%d &quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">temp</span><span class="p">);</span> <span class="c1">//选中的选项个数 </span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">*</span><span class="n">temp</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;)&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">true_answer</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//两个答案相等 </span>
</span><span class='line'>                <span class="n">get_score</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">full_score</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">false_amount</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">get_score</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="cm">/*找最大的错误次数*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">max</span><span class="o">&lt;</span><span class="n">false_amount</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">false_amount</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="cm">/*输出错误次数和编号*/</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">max</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">max</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">max</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Too simple&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">false_amount</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %d&quot;</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1058.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1057. 数零壹 (20)]]></title>
    <link href="http://czczup.github.io/blog/20170501/pat-basic-level-1057/"/>
    <updated>2017-05-01T18:19:22+08:00</updated>
    <id>http://czczup.github.io/blog/20170501/pat-basic-level-1057</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定一串长度不超过10<sup>5</sup>的字符串，本题要求你将其中所有英文字母的序号（字母a-z对应序号1-26，不分大小写）相加，得到整数N，然后再分析一下N的二进制表示中有多少0、多少1。例如给定字符串“PAT (Basic)”，其字母序号之和为：16+1+20+2+1+19+9+3=71，而71的二进制是1000111，即有3个0、4个1。</p>

<!--more-->


<pre><code>输入格式：
输入在一行中给出长度不超过10^5、以回车结束的字符串。

输出格式：
在一行中先后输出0的个数和1的个数，其间以空格分隔。

输入样例：
PAT (Basic)

输出样例：
3 4
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">string</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'>    <span class="n">gets</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;Z&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;z&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">sum</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">zero</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">one</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d&quot;</span><span class="p">,</span><span class="n">zero</span><span class="p">,</span><span class="n">one</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1057.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1056. 组合数的和 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170501/pat-basic-level-1056/"/>
    <updated>2017-05-01T18:06:13+08:00</updated>
    <id>http://czczup.github.io/blog/20170501/pat-basic-level-1056</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;给定N个非0的个位数字，用其中任意2个数字都可以组合成1个2位的数字。要求所有可能组合出来的2位数字的和。例如给定2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。</p>

<!--more-->


<pre><code>输入格式：
输入在一行中先给出N（1&lt;N&lt;10），随后是N个不同的非0个位数字。数字间以空格分隔。

输出格式：
输出所有可能组合出来的2位数字的和。

输入样例：
3 2 8 5

输出样例：
330
</code></pre>

<hr />

<figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">number</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">j</span><span class="p">){</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">number</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="n">sum</span> <span class="o">+=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://czczup.github.io/images/patb/1056.png"></p>
]]></content>
  </entry>
  
</feed>
