<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pat乙级 | DeepIceCream]]></title>
  <link href="http://czczup.github.io/blog/categories/patyi-ji/atom.xml" rel="self"/>
  <link href="http://czczup.github.io/"/>
  <updated>2018-02-15T23:39:43+08:00</updated>
  <id>http://czczup.github.io/</id>
  <author>
    <name><![CDATA[nonoka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1034. 有理数四则运算(20)]]></title>
    <link href="http://czczup.github.io/blog/20180213/pat-basic-level-1034/"/>
    <updated>2018-02-13T22:44:16+08:00</updated>
    <id>http://czczup.github.io/blog/20180213/pat-basic-level-1034</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求编写程序，计算2个有理数的和、差、积、商。</p>

<!--more-->


<pre><code>输入格式：
输入在一行中按照“a1/b1 a2/b2”的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为0。

输出格式：
分别在4行中按照“有理数1 运算符 有理数2 = 结果”的格式顺序输出2个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式“k a/b”，其中k是整数部分，a/b是最简分数部分；若为负数，则须加括号；若除法分母为0，则输出“Inf”。题目保证正确的输出中没有超过整型范围的整数。

输入样例1：
2/3 -4/2

输出样例1：
2/3 + (-2) = (-1 1/3)
2/3 - (-2) = 2 2/3
2/3 * (-2) = (-1 1/3)
2/3 / (-2) = (-1/3)

输入样例2：
5/3 0/6

输出样例2：
1 2/3 + 0 = 1 2/3
1 2/3 - 0 = 1 2/3
1 2/3 * 0 = 0
1 2/3 / 0 = Inf
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>推导分数加法公式：$ \frac{symbol_1\times{a}}{b} + \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} + symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数减法公式：$ \frac{symbol_1\times{a}}{b} - \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{ad} - symbol_2\times{bc}}{bd} $。</p></li>
<li><p>推导分数乘法公式：$ \frac{symbol_1\times{a}}{b} \times  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ac}}{bd} $。</p></li>
<li><p>推导分数除法公式：$ \frac{symbol_1\times{a}}{b} \div  \frac{symbol_2\times{c}}{d} = \frac{symbol_1\times{symbol_2}\times{ad}}{bc} $。</p></li>
<li><p>读入数据，若<code>numerator</code>或<code>denominator</code>小于0，则<code>symbol</code>初始化为<code>"-"</code>,否则初始化为<code>""</code>。</p></li>
<li><p>用辗转相除法求最大公约数<code>maxnum</code>。</p></li>
<li><p>根据上述公式实现<code>add(num)</code>、<code>sub(num)</code>、<code>mul(num)</code>、<code>div(num)</code>方法。</p></li>
<li><p>实现<code>simplify()</code>分数化简方法，在加减乘除运算之后进行分数化简。首先，计算分数的整数部分：<code>integer = numerator // denominator</code>；然后，更新分数的分子：<code>numerator -= integer * denominator</code>；接着，更新分数的分子：<code>numerator = numerator // maxnum</code>；之后，更新分数的分母：<code>denominator = denominator // maxnum</code>；最后，根据整数、分子、分母三部分是否为0生成字符串<code>value</code>。</p></li>
<li><p>输出化简后的分数，若为负数则在数字两端额外输出括号。</p></li>
</ol>


<hr />

<p><figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">number</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="err">&lt;</span><span class="nf">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>        <span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">%</span><span class="n">a</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">b</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">simplify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Inf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">maxnum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span> <span class="c"># 最大公约数</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">-=</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">//</span> <span class="n">maxnum</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">integer</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">integer</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">numerator</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numerator</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="o">.</span><span class="n">denominator</span><span class="p">))</span>
</span><span class='line'>        <span class="n">denominator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">denominator</span> <span class="o">*</span> <span class="n">num</span><span class="o">.</span><span class="n">numerator</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="p">([</span><span class="n">numerator</span><span class="p">,</span><span class="n">denominator</span><span class="p">])</span>
</span><span class='line'>    <span class="k">def</span> <span class="err">&lt;</span><span class="nf">strong</span><span class="o">&gt;</span><span class="nb">str</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">input_num</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)]</span>
</span><span class='line'><span class="n">num1</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
</span><span class='line'><span class="n">num2</span> <span class="o">=</span> <span class="n">number</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">input_num</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'><span class="n">num_add</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_sub</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_mul</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="n">num_div</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">num</span><span class="o">.</span><span class="n">simplify</span><span class="p">()</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">num1</span><span class="p">,</span><span class="n">num2</span><span class="p">,</span><span class="n">num_add</span><span class="p">,</span><span class="n">num_sub</span><span class="p">,</span><span class="n">num_mul</span><span class="p">,</span><span class="n">num_div</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">+&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num_add</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num_sub</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">*&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num_mul</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">num_div</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/patb/1034.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1015. 德才论 (25)]]></title>
    <link href="http://czczup.github.io/blog/20170410/pat-basic-level-1015/"/>
    <updated>2017-04-10T16:56:03+08:00</updated>
    <id>http://czczup.github.io/blog/20170410/pat-basic-level-1015</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>

<pre><code>输入格式：
输入第1行给出3个正整数，分别为：N（&lt;=105），即考生总数；L（&gt;=60），为录取最低分数线，即德分和才分均不低于L的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线L的考生也按总分排序，但排在第三类考生之后。
随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。数字间以空格分隔。

输出格式：
输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。

输入样例：
14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60

输出样例：
12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>根据排序规则写一个<code>cmp()</code>函数，调用<code>&lt;algorithm&gt;</code>中的<code>sort(list,list+len,cmp)</code>快排函数进行排序。</p>

<ul>
<li>高于优先录取线（才德全尽）；</li>
<li>才分不到但德分到线（德胜才）；</li>
<li>德才分均低于H，但是德分不低于才分（才德兼亡但尚有德胜才）；</li>
<li>其他达到最低线L。</li>
</ul>
</li>
</ol>


<hr />

<p><figure class='code'><figcaption><span>C++语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">algorithm</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">examination</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">examnum</span><span class="p">;</span><span class="c1">//准考证号</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">moral</span><span class="p">,</span><span class="n">talent</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span><span class="c1">//德、才、总分</span>
</span><span class='line'><span class="p">}</span><span class="n">exam</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">exam</span> <span class="n">a</span><span class="p">,</span><span class="n">exam</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">sum</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">sum</span><span class="p">)</span><span class="c1">//先按总分排,降序</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">moral</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">moral</span><span class="p">)</span><span class="c1">//再按德分排,降序</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">examnum</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">b</span><span class="p">.</span><span class="n">examnum</span><span class="p">;</span><span class="c1">//再按学号排,升序</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">moral</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">moral</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">exam</span> <span class="n">swap</span><span class="p">(</span><span class="n">exam</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stu1</span><span class="p">,</span><span class="n">exam</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stu2</span><span class="p">){</span><span class="c1">//交换两个成绩的位置</span>
</span><span class='line'>    <span class="n">exam</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">stu1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stu1</span> <span class="o">=</span> <span class="n">stu2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stu2</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">amount</span><span class="p">,</span><span class="n">lowest</span><span class="p">,</span><span class="n">priority</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">amount</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lowest</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">priority</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exam</span> <span class="n">stu</span><span class="p">[</span><span class="n">amount</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">examnum</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">);</span>
</span><span class='line'>        <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sum</span> <span class="o">=</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span> <span class="o">+</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到德才全尽交换到头部</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">priority</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">priority</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="p">,</span><span class="n">stu</span> <span class="o">+</span> <span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到德胜才交换到德才全尽后</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">priority</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到才德兼亡但尚有德胜才交换到德胜才后</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&lt;</span><span class="n">priority</span> <span class="o">&amp;&amp;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">lowest</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">amount</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//找到才德兼亡但尚有德胜才交换到德胜才后</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="o">&gt;=</span><span class="n">lowest</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="o">&gt;=</span><span class="n">lowest</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">stu</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">stu</span><span class="o">+</span><span class="n">temp</span><span class="p">,</span><span class="n">stu</span><span class="o">+</span><span class="n">count</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">count</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">examnum</span><span class="p">,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">moral</span><span class="p">,</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">talent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/patb/1015.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1046. 划拳 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170405/pat-basic-level-1046/"/>
    <updated>2017-04-05T10:54:26+08:00</updated>
    <id>http://czczup.github.io/blog/20170405/pat-basic-level-1046</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p>

<pre><code>输入格式：
输入第一行先给出一个正整数N（&lt;=100），随后N行，每行给出一轮划拳的记录，格式为：
甲喊 甲划 乙喊 乙划
其中“喊”是喊出的数字，“划”是划出的数字，均为不超过100的正整数（两只手一起划）。

输出格式：
在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。

输入样例：
5
8 10 9 12
5 10 5 10
3 8 5 12
12 18 1 13
4 16 12 15

输出样例：
1 2
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>用<code>drink1</code>、<code>drink2</code>分别记录甲和乙喝酒的杯数。</p></li>
<li><p>将两人划的数字分别与喊的数字之和比较，若相等则杯数+1。</p></li>
</ol>


<hr />

<p><figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fst1</span><span class="p">,</span><span class="n">fst2</span><span class="p">,</span><span class="n">sec1</span><span class="p">,</span><span class="n">sec2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">drink1</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">drink2</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">fst1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">fst2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sec1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sec2</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">fst1</span> <span class="o">+</span> <span class="n">sec1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">fst2</span><span class="o">==</span><span class="n">sum</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">sec2</span><span class="o">!=</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'>            <span class="n">drink2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">sec2</span><span class="o">==</span><span class="n">sum</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fst2</span><span class="o">!=</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'>            <span class="n">drink1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">drink1</span><span class="p">,</span><span class="n">drink2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/patb/1046.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1026. 程序运行时间 (15)]]></title>
    <link href="http://czczup.github.io/blog/20170226/pat-basic-level-1026/"/>
    <updated>2017-02-26T10:42:56+08:00</updated>
    <id>http://czczup.github.io/blog/20170226/pat-basic-level-1026</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;要获得一个C语言程序的运行时间，常用的方法是调用头文件<code>time.h</code>，其中提供了<code>clock()</code>函数，可以捕捉从程序开始运行到<code>clock()</code>被调用时所耗费的时间。这个时间单位是<code>clock tick</code>，即“时钟打点”。同时还有一个常数<code>CLK_TCK</code>，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数f的运行时间，我们只要在调用f之前先调用<code>clock()</code>，获得一个时钟打点数C1；在f执行完成后再调用<code>clock()</code>，获得另一个时钟打点数C2；两次获得的时钟打点数之差<code>(C2-C1)</code>就是f运行所消耗的时钟打点数，再除以常数<code>CLK_TCK</code>，就得到了以秒为单位的运行时间。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;这里不妨简单假设常数<code>CLK_TCK</code>为100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>

<pre><code>输入格式：
输入在一行中顺序给出2个整数C1和C2。注意两次获得的时钟打点数肯定不相同，即C1 &lt; C2，并且取值在[0, 107]。

输出格式：
在一行中输出被测函数运行的时间。运行时间必须按照“hh:mm:ss”（即2位的“时:分:秒”）格式输出；不足1秒的时间四舍五入到秒。

输入样例：
123 4577973

输出样例：
12:42:59
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li><p>计算时间差并四舍五入。</p></li>
<li><p>转换为“hh:mm:ss”格式输出。</p></li>
</ol>


<hr />

<p><figure class='code'><figcaption><span>C语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">CLK1</span><span class="p">,</span><span class="n">CLK2</span><span class="p">,</span><span class="n">dCLK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">CLK1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">CLK2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dCLK</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)((</span><span class="n">CLK2</span><span class="o">-</span><span class="n">CLK1</span><span class="p">)</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hour</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">/</span> <span class="mi">3600</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minute</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">%</span> <span class="mi">3600</span> <span class="o">/</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="n">second</span> <span class="o">=</span> <span class="n">dCLK</span> <span class="o">%</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="mo">02</span><span class="nl">d</span><span class="p">:</span><span class="o">%</span><span class="mo">02</span><span class="nl">d</span><span class="p">:</span><span class="o">%</span><span class="mo">02</span><span class="n">d</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/patb/1026.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1017. A除以B (20)]]></title>
    <link href="http://czczup.github.io/blog/20170218/pat-basic-level-1017/"/>
    <updated>2017-02-18T16:16:05+08:00</updated>
    <id>http://czczup.github.io/blog/20170218/pat-basic-level-1017</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。</p>

<!--more-->


<pre><code>输入格式：
输入在1行中依次给出A和B，中间以1空格分隔。

输出格式：
在1行中依次输出Q和R，中间以1空格分隔。

输入样例：
123456789050987654321 7

输出样例：
17636684150141093474 3
</code></pre>

<hr />

<h3>思路</h3>

<ol>
<li>本来是考的大整数处理的，用Python偷了个懒，简直是开挂。</li>
</ol>


<hr />

<p><figure class='code'><figcaption><span>Python语言实现 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">//</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/patb/1017.png"></p>
]]></content>
  </entry>
  
</feed>
